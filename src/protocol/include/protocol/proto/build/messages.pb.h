// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "request.pb.h"
#include "response.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace Serialize {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class WrappedMessage;
class WrappedMessageDefaultTypeInternal;
extern WrappedMessageDefaultTypeInternal _WrappedMessage_default_instance_;
}  // namespace Serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialize::Header* Arena::CreateMaybeMessage<::Serialize::Header>(Arena*);
template<> ::Serialize::WrappedMessage* Arena::CreateMaybeMessage<::Serialize::WrappedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialize {

// ===================================================================

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kCommandFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // fixed32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 command = 2;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command() const;
  void _internal_set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed64 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WrappedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.WrappedMessage) */ {
 public:
  inline WrappedMessage() : WrappedMessage(nullptr) {}
  virtual ~WrappedMessage();

  WrappedMessage(const WrappedMessage& from);
  WrappedMessage(WrappedMessage&& from) noexcept
    : WrappedMessage() {
    *this = ::std::move(from);
  }

  inline WrappedMessage& operator=(const WrappedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrappedMessage& operator=(WrappedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrappedMessage& default_instance();

  enum MsgCase {
    kRequest = 1,
    kResponse = 2,
    MSG_NOT_SET = 0,
  };

  static inline const WrappedMessage* internal_default_instance() {
    return reinterpret_cast<const WrappedMessage*>(
               &_WrappedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WrappedMessage& a, WrappedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WrappedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrappedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrappedMessage* New() const final {
    return CreateMaybeMessage<WrappedMessage>(nullptr);
  }

  WrappedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrappedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrappedMessage& from);
  void MergeFrom(const WrappedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrappedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.WrappedMessage";
  }
  protected:
  explicit WrappedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .Serialize.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::Serialize::Request& request() const;
  ::Serialize::Request* release_request();
  ::Serialize::Request* mutable_request();
  void set_allocated_request(::Serialize::Request* request);
  private:
  const ::Serialize::Request& _internal_request() const;
  ::Serialize::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::Serialize::Request* request);
  ::Serialize::Request* unsafe_arena_release_request();

  // .Serialize.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::Serialize::Response& response() const;
  ::Serialize::Response* release_response();
  ::Serialize::Response* mutable_response();
  void set_allocated_response(::Serialize::Response* response);
  private:
  const ::Serialize::Response& _internal_response() const;
  ::Serialize::Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::Serialize::Response* response);
  ::Serialize::Response* unsafe_arena_release_response();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Serialize.WrappedMessage)
 private:
  class _Internal;
  void set_has_request();
  void set_has_response();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    MsgUnion() {}
    ::Serialize::Request* request_;
    ::Serialize::Response* response_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// fixed32 version = 1;
inline void Header::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::version() const {
  // @@protoc_insertion_point(field_get:Serialize.Header.version)
  return _internal_version();
}
inline void Header::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void Header::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Serialize.Header.version)
}

// fixed32 command = 2;
inline void Header::clear_command() {
  command_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_command() const {
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::command() const {
  // @@protoc_insertion_point(field_get:Serialize.Header.command)
  return _internal_command();
}
inline void Header::_internal_set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  command_ = value;
}
inline void Header::set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:Serialize.Header.command)
}

// fixed64 length = 3;
inline void Header::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::length() const {
  // @@protoc_insertion_point(field_get:Serialize.Header.length)
  return _internal_length();
}
inline void Header::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
}
inline void Header::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Serialize.Header.length)
}

// -------------------------------------------------------------------

// WrappedMessage

// .Serialize.Request request = 1;
inline bool WrappedMessage::_internal_has_request() const {
  return msg_case() == kRequest;
}
inline bool WrappedMessage::has_request() const {
  return _internal_has_request();
}
inline void WrappedMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline ::Serialize::Request* WrappedMessage::release_request() {
  // @@protoc_insertion_point(field_release:Serialize.WrappedMessage.request)
  if (_internal_has_request()) {
    clear_has_msg();
      ::Serialize::Request* temp = msg_.request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::Request& WrappedMessage::_internal_request() const {
  return _internal_has_request()
      ? *msg_.request_
      : reinterpret_cast< ::Serialize::Request&>(::Serialize::_Request_default_instance_);
}
inline const ::Serialize::Request& WrappedMessage::request() const {
  // @@protoc_insertion_point(field_get:Serialize.WrappedMessage.request)
  return _internal_request();
}
inline ::Serialize::Request* WrappedMessage::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.WrappedMessage.request)
  if (_internal_has_request()) {
    clear_has_msg();
    ::Serialize::Request* temp = msg_.request_;
    msg_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrappedMessage::unsafe_arena_set_allocated_request(::Serialize::Request* request) {
  clear_msg();
  if (request) {
    set_has_request();
    msg_.request_ = request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.WrappedMessage.request)
}
inline ::Serialize::Request* WrappedMessage::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_msg();
    set_has_request();
    msg_.request_ = CreateMaybeMessage< ::Serialize::Request >(GetArena());
  }
  return msg_.request_;
}
inline ::Serialize::Request* WrappedMessage::mutable_request() {
  // @@protoc_insertion_point(field_mutable:Serialize.WrappedMessage.request)
  return _internal_mutable_request();
}

// .Serialize.Response response = 2;
inline bool WrappedMessage::_internal_has_response() const {
  return msg_case() == kResponse;
}
inline bool WrappedMessage::has_response() const {
  return _internal_has_response();
}
inline void WrappedMessage::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline ::Serialize::Response* WrappedMessage::release_response() {
  // @@protoc_insertion_point(field_release:Serialize.WrappedMessage.response)
  if (_internal_has_response()) {
    clear_has_msg();
      ::Serialize::Response* temp = msg_.response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::Response& WrappedMessage::_internal_response() const {
  return _internal_has_response()
      ? *msg_.response_
      : reinterpret_cast< ::Serialize::Response&>(::Serialize::_Response_default_instance_);
}
inline const ::Serialize::Response& WrappedMessage::response() const {
  // @@protoc_insertion_point(field_get:Serialize.WrappedMessage.response)
  return _internal_response();
}
inline ::Serialize::Response* WrappedMessage::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.WrappedMessage.response)
  if (_internal_has_response()) {
    clear_has_msg();
    ::Serialize::Response* temp = msg_.response_;
    msg_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrappedMessage::unsafe_arena_set_allocated_response(::Serialize::Response* response) {
  clear_msg();
  if (response) {
    set_has_response();
    msg_.response_ = response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.WrappedMessage.response)
}
inline ::Serialize::Response* WrappedMessage::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_msg();
    set_has_response();
    msg_.response_ = CreateMaybeMessage< ::Serialize::Response >(GetArena());
  }
  return msg_.response_;
}
inline ::Serialize::Response* WrappedMessage::mutable_response() {
  // @@protoc_insertion_point(field_mutable:Serialize.WrappedMessage.response)
  return _internal_mutable_response();
}

inline bool WrappedMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void WrappedMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline WrappedMessage::MsgCase WrappedMessage::msg_case() const {
  return WrappedMessage::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
