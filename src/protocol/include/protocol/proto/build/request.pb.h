// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_2eproto;
namespace Serialize {
class InRequest;
class InRequestDefaultTypeInternal;
extern InRequestDefaultTypeInternal _InRequest_default_instance_;
class JoinRoomRequest;
class JoinRoomRequestDefaultTypeInternal;
extern JoinRoomRequestDefaultTypeInternal _JoinRoomRequest_default_instance_;
class RegRequest;
class RegRequestDefaultTypeInternal;
extern RegRequestDefaultTypeInternal _RegRequest_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class TextRequest;
class TextRequestDefaultTypeInternal;
extern TextRequestDefaultTypeInternal _TextRequest_default_instance_;
}  // namespace Serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialize::InRequest* Arena::CreateMaybeMessage<::Serialize::InRequest>(Arena*);
template<> ::Serialize::JoinRoomRequest* Arena::CreateMaybeMessage<::Serialize::JoinRoomRequest>(Arena*);
template<> ::Serialize::RegRequest* Arena::CreateMaybeMessage<::Serialize::RegRequest>(Arena*);
template<> ::Serialize::Request* Arena::CreateMaybeMessage<::Serialize::Request>(Arena*);
template<> ::Serialize::TextRequest* Arena::CreateMaybeMessage<::Serialize::TextRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialize {

// ===================================================================

class RegRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.RegRequest) */ {
 public:
  inline RegRequest() : RegRequest(nullptr) {}
  virtual ~RegRequest();

  RegRequest(const RegRequest& from);
  RegRequest(RegRequest&& from) noexcept
    : RegRequest() {
    *this = ::std::move(from);
  }

  inline RegRequest& operator=(const RegRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegRequest& operator=(RegRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegRequest& default_instance();

  static inline const RegRequest* internal_default_instance() {
    return reinterpret_cast<const RegRequest*>(
               &_RegRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegRequest& a, RegRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegRequest* New() const final {
    return CreateMaybeMessage<RegRequest>(nullptr);
  }

  RegRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegRequest& from);
  void MergeFrom(const RegRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.RegRequest";
  }
  protected:
  explicit RegRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Serialize.RegRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class InRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.InRequest) */ {
 public:
  inline InRequest() : InRequest(nullptr) {}
  virtual ~InRequest();

  InRequest(const InRequest& from);
  InRequest(InRequest&& from) noexcept
    : InRequest() {
    *this = ::std::move(from);
  }

  inline InRequest& operator=(const InRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InRequest& operator=(InRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InRequest& default_instance();

  static inline const InRequest* internal_default_instance() {
    return reinterpret_cast<const InRequest*>(
               &_InRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InRequest& a, InRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InRequest* New() const final {
    return CreateMaybeMessage<InRequest>(nullptr);
  }

  InRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InRequest& from);
  void MergeFrom(const InRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.InRequest";
  }
  protected:
  explicit InRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Serialize.InRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class JoinRoomRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.JoinRoomRequest) */ {
 public:
  inline JoinRoomRequest() : JoinRoomRequest(nullptr) {}
  virtual ~JoinRoomRequest();

  JoinRoomRequest(const JoinRoomRequest& from);
  JoinRoomRequest(JoinRoomRequest&& from) noexcept
    : JoinRoomRequest() {
    *this = ::std::move(from);
  }

  inline JoinRoomRequest& operator=(const JoinRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomRequest& operator=(JoinRoomRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinRoomRequest& default_instance();

  static inline const JoinRoomRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRoomRequest*>(
               &_JoinRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JoinRoomRequest& a, JoinRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinRoomRequest* New() const final {
    return CreateMaybeMessage<JoinRoomRequest>(nullptr);
  }

  JoinRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRoomRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRoomRequest& from);
  void MergeFrom(const JoinRoomRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.JoinRoomRequest";
  }
  protected:
  explicit JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // int32 room_id = 1;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.JoinRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class TextRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.TextRequest) */ {
 public:
  inline TextRequest() : TextRequest(nullptr) {}
  virtual ~TextRequest();

  TextRequest(const TextRequest& from);
  TextRequest(TextRequest&& from) noexcept
    : TextRequest() {
    *this = ::std::move(from);
  }

  inline TextRequest& operator=(const TextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextRequest& operator=(TextRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextRequest& default_instance();

  static inline const TextRequest* internal_default_instance() {
    return reinterpret_cast<const TextRequest*>(
               &_TextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TextRequest& a, TextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextRequest* New() const final {
    return CreateMaybeMessage<TextRequest>(nullptr);
  }

  TextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextRequest& from);
  void MergeFrom(const TextRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.TextRequest";
  }
  protected:
  explicit TextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kTextFieldNumber = 3,
    kRoomIdFieldNumber = 2,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string text = 3;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 room_id = 2;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.TextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum MsgCase {
    kRegisterRequest = 1,
    kInputRequest = 2,
    kJoinRoomRequest = 3,
    kTextRequest = 4,
    MSG_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisterRequestFieldNumber = 1,
    kInputRequestFieldNumber = 2,
    kJoinRoomRequestFieldNumber = 3,
    kTextRequestFieldNumber = 4,
  };
  // .Serialize.RegRequest register_request = 1;
  bool has_register_request() const;
  private:
  bool _internal_has_register_request() const;
  public:
  void clear_register_request();
  const ::Serialize::RegRequest& register_request() const;
  ::Serialize::RegRequest* release_register_request();
  ::Serialize::RegRequest* mutable_register_request();
  void set_allocated_register_request(::Serialize::RegRequest* register_request);
  private:
  const ::Serialize::RegRequest& _internal_register_request() const;
  ::Serialize::RegRequest* _internal_mutable_register_request();
  public:
  void unsafe_arena_set_allocated_register_request(
      ::Serialize::RegRequest* register_request);
  ::Serialize::RegRequest* unsafe_arena_release_register_request();

  // .Serialize.InRequest input_request = 2;
  bool has_input_request() const;
  private:
  bool _internal_has_input_request() const;
  public:
  void clear_input_request();
  const ::Serialize::InRequest& input_request() const;
  ::Serialize::InRequest* release_input_request();
  ::Serialize::InRequest* mutable_input_request();
  void set_allocated_input_request(::Serialize::InRequest* input_request);
  private:
  const ::Serialize::InRequest& _internal_input_request() const;
  ::Serialize::InRequest* _internal_mutable_input_request();
  public:
  void unsafe_arena_set_allocated_input_request(
      ::Serialize::InRequest* input_request);
  ::Serialize::InRequest* unsafe_arena_release_input_request();

  // .Serialize.JoinRoomRequest join_room_request = 3;
  bool has_join_room_request() const;
  private:
  bool _internal_has_join_room_request() const;
  public:
  void clear_join_room_request();
  const ::Serialize::JoinRoomRequest& join_room_request() const;
  ::Serialize::JoinRoomRequest* release_join_room_request();
  ::Serialize::JoinRoomRequest* mutable_join_room_request();
  void set_allocated_join_room_request(::Serialize::JoinRoomRequest* join_room_request);
  private:
  const ::Serialize::JoinRoomRequest& _internal_join_room_request() const;
  ::Serialize::JoinRoomRequest* _internal_mutable_join_room_request();
  public:
  void unsafe_arena_set_allocated_join_room_request(
      ::Serialize::JoinRoomRequest* join_room_request);
  ::Serialize::JoinRoomRequest* unsafe_arena_release_join_room_request();

  // .Serialize.TextRequest text_request = 4;
  bool has_text_request() const;
  private:
  bool _internal_has_text_request() const;
  public:
  void clear_text_request();
  const ::Serialize::TextRequest& text_request() const;
  ::Serialize::TextRequest* release_text_request();
  ::Serialize::TextRequest* mutable_text_request();
  void set_allocated_text_request(::Serialize::TextRequest* text_request);
  private:
  const ::Serialize::TextRequest& _internal_text_request() const;
  ::Serialize::TextRequest* _internal_mutable_text_request();
  public:
  void unsafe_arena_set_allocated_text_request(
      ::Serialize::TextRequest* text_request);
  ::Serialize::TextRequest* unsafe_arena_release_text_request();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Serialize.Request)
 private:
  class _Internal;
  void set_has_register_request();
  void set_has_input_request();
  void set_has_join_room_request();
  void set_has_text_request();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    MsgUnion() {}
    ::Serialize::RegRequest* register_request_;
    ::Serialize::InRequest* input_request_;
    ::Serialize::JoinRoomRequest* join_room_request_;
    ::Serialize::TextRequest* text_request_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegRequest

// string login = 1;
inline void RegRequest::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegRequest::login() const {
  // @@protoc_insertion_point(field_get:Serialize.RegRequest.login)
  return _internal_login();
}
inline void RegRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:Serialize.RegRequest.login)
}
inline std::string* RegRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:Serialize.RegRequest.login)
  return _internal_mutable_login();
}
inline const std::string& RegRequest::_internal_login() const {
  return login_.Get();
}
inline void RegRequest::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegRequest::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.RegRequest.login)
}
inline void RegRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.RegRequest.login)
}
inline void RegRequest::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.RegRequest.login)
}
inline std::string* RegRequest::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegRequest::release_login() {
  // @@protoc_insertion_point(field_release:Serialize.RegRequest.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.RegRequest.login)
}

// string password = 2;
inline void RegRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegRequest::password() const {
  // @@protoc_insertion_point(field_get:Serialize.RegRequest.password)
  return _internal_password();
}
inline void RegRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Serialize.RegRequest.password)
}
inline std::string* RegRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Serialize.RegRequest.password)
  return _internal_mutable_password();
}
inline const std::string& RegRequest::_internal_password() const {
  return password_.Get();
}
inline void RegRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.RegRequest.password)
}
inline void RegRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.RegRequest.password)
}
inline void RegRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.RegRequest.password)
}
inline std::string* RegRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegRequest::release_password() {
  // @@protoc_insertion_point(field_release:Serialize.RegRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.RegRequest.password)
}

// -------------------------------------------------------------------

// InRequest

// string login = 1;
inline void InRequest::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InRequest::login() const {
  // @@protoc_insertion_point(field_get:Serialize.InRequest.login)
  return _internal_login();
}
inline void InRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:Serialize.InRequest.login)
}
inline std::string* InRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:Serialize.InRequest.login)
  return _internal_mutable_login();
}
inline const std::string& InRequest::_internal_login() const {
  return login_.Get();
}
inline void InRequest::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InRequest::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.InRequest.login)
}
inline void InRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.InRequest.login)
}
inline void InRequest::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.InRequest.login)
}
inline std::string* InRequest::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InRequest::release_login() {
  // @@protoc_insertion_point(field_release:Serialize.InRequest.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.InRequest.login)
}

// string password = 2;
inline void InRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InRequest::password() const {
  // @@protoc_insertion_point(field_get:Serialize.InRequest.password)
  return _internal_password();
}
inline void InRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Serialize.InRequest.password)
}
inline std::string* InRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Serialize.InRequest.password)
  return _internal_mutable_password();
}
inline const std::string& InRequest::_internal_password() const {
  return password_.Get();
}
inline void InRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.InRequest.password)
}
inline void InRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.InRequest.password)
}
inline void InRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.InRequest.password)
}
inline std::string* InRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InRequest::release_password() {
  // @@protoc_insertion_point(field_release:Serialize.InRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.InRequest.password)
}

// -------------------------------------------------------------------

// JoinRoomRequest

// int32 room_id = 1;
inline void JoinRoomRequest::clear_room_id() {
  room_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinRoomRequest::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinRoomRequest::room_id() const {
  // @@protoc_insertion_point(field_get:Serialize.JoinRoomRequest.room_id)
  return _internal_room_id();
}
inline void JoinRoomRequest::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_id_ = value;
}
inline void JoinRoomRequest::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:Serialize.JoinRoomRequest.room_id)
}

// -------------------------------------------------------------------

// TextRequest

// string login = 1;
inline void TextRequest::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextRequest::login() const {
  // @@protoc_insertion_point(field_get:Serialize.TextRequest.login)
  return _internal_login();
}
inline void TextRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:Serialize.TextRequest.login)
}
inline std::string* TextRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:Serialize.TextRequest.login)
  return _internal_mutable_login();
}
inline const std::string& TextRequest::_internal_login() const {
  return login_.Get();
}
inline void TextRequest::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextRequest::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.TextRequest.login)
}
inline void TextRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.TextRequest.login)
}
inline void TextRequest::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.TextRequest.login)
}
inline std::string* TextRequest::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextRequest::release_login() {
  // @@protoc_insertion_point(field_release:Serialize.TextRequest.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.TextRequest.login)
}

// int32 room_id = 2;
inline void TextRequest::clear_room_id() {
  room_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextRequest::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextRequest::room_id() const {
  // @@protoc_insertion_point(field_get:Serialize.TextRequest.room_id)
  return _internal_room_id();
}
inline void TextRequest::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_id_ = value;
}
inline void TextRequest::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:Serialize.TextRequest.room_id)
}

// string text = 3;
inline void TextRequest::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextRequest::text() const {
  // @@protoc_insertion_point(field_get:Serialize.TextRequest.text)
  return _internal_text();
}
inline void TextRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Serialize.TextRequest.text)
}
inline std::string* TextRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Serialize.TextRequest.text)
  return _internal_mutable_text();
}
inline const std::string& TextRequest::_internal_text() const {
  return text_.Get();
}
inline void TextRequest::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextRequest::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.TextRequest.text)
}
inline void TextRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.TextRequest.text)
}
inline void TextRequest::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.TextRequest.text)
}
inline std::string* TextRequest::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextRequest::release_text() {
  // @@protoc_insertion_point(field_release:Serialize.TextRequest.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.TextRequest.text)
}

// -------------------------------------------------------------------

// Request

// .Serialize.RegRequest register_request = 1;
inline bool Request::_internal_has_register_request() const {
  return msg_case() == kRegisterRequest;
}
inline bool Request::has_register_request() const {
  return _internal_has_register_request();
}
inline void Request::set_has_register_request() {
  _oneof_case_[0] = kRegisterRequest;
}
inline void Request::clear_register_request() {
  if (_internal_has_register_request()) {
    if (GetArena() == nullptr) {
      delete msg_.register_request_;
    }
    clear_has_msg();
  }
}
inline ::Serialize::RegRequest* Request::release_register_request() {
  // @@protoc_insertion_point(field_release:Serialize.Request.register_request)
  if (_internal_has_register_request()) {
    clear_has_msg();
      ::Serialize::RegRequest* temp = msg_.register_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.register_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::RegRequest& Request::_internal_register_request() const {
  return _internal_has_register_request()
      ? *msg_.register_request_
      : reinterpret_cast< ::Serialize::RegRequest&>(::Serialize::_RegRequest_default_instance_);
}
inline const ::Serialize::RegRequest& Request::register_request() const {
  // @@protoc_insertion_point(field_get:Serialize.Request.register_request)
  return _internal_register_request();
}
inline ::Serialize::RegRequest* Request::unsafe_arena_release_register_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.Request.register_request)
  if (_internal_has_register_request()) {
    clear_has_msg();
    ::Serialize::RegRequest* temp = msg_.register_request_;
    msg_.register_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_register_request(::Serialize::RegRequest* register_request) {
  clear_msg();
  if (register_request) {
    set_has_register_request();
    msg_.register_request_ = register_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.Request.register_request)
}
inline ::Serialize::RegRequest* Request::_internal_mutable_register_request() {
  if (!_internal_has_register_request()) {
    clear_msg();
    set_has_register_request();
    msg_.register_request_ = CreateMaybeMessage< ::Serialize::RegRequest >(GetArena());
  }
  return msg_.register_request_;
}
inline ::Serialize::RegRequest* Request::mutable_register_request() {
  // @@protoc_insertion_point(field_mutable:Serialize.Request.register_request)
  return _internal_mutable_register_request();
}

// .Serialize.InRequest input_request = 2;
inline bool Request::_internal_has_input_request() const {
  return msg_case() == kInputRequest;
}
inline bool Request::has_input_request() const {
  return _internal_has_input_request();
}
inline void Request::set_has_input_request() {
  _oneof_case_[0] = kInputRequest;
}
inline void Request::clear_input_request() {
  if (_internal_has_input_request()) {
    if (GetArena() == nullptr) {
      delete msg_.input_request_;
    }
    clear_has_msg();
  }
}
inline ::Serialize::InRequest* Request::release_input_request() {
  // @@protoc_insertion_point(field_release:Serialize.Request.input_request)
  if (_internal_has_input_request()) {
    clear_has_msg();
      ::Serialize::InRequest* temp = msg_.input_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.input_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::InRequest& Request::_internal_input_request() const {
  return _internal_has_input_request()
      ? *msg_.input_request_
      : reinterpret_cast< ::Serialize::InRequest&>(::Serialize::_InRequest_default_instance_);
}
inline const ::Serialize::InRequest& Request::input_request() const {
  // @@protoc_insertion_point(field_get:Serialize.Request.input_request)
  return _internal_input_request();
}
inline ::Serialize::InRequest* Request::unsafe_arena_release_input_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.Request.input_request)
  if (_internal_has_input_request()) {
    clear_has_msg();
    ::Serialize::InRequest* temp = msg_.input_request_;
    msg_.input_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_input_request(::Serialize::InRequest* input_request) {
  clear_msg();
  if (input_request) {
    set_has_input_request();
    msg_.input_request_ = input_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.Request.input_request)
}
inline ::Serialize::InRequest* Request::_internal_mutable_input_request() {
  if (!_internal_has_input_request()) {
    clear_msg();
    set_has_input_request();
    msg_.input_request_ = CreateMaybeMessage< ::Serialize::InRequest >(GetArena());
  }
  return msg_.input_request_;
}
inline ::Serialize::InRequest* Request::mutable_input_request() {
  // @@protoc_insertion_point(field_mutable:Serialize.Request.input_request)
  return _internal_mutable_input_request();
}

// .Serialize.JoinRoomRequest join_room_request = 3;
inline bool Request::_internal_has_join_room_request() const {
  return msg_case() == kJoinRoomRequest;
}
inline bool Request::has_join_room_request() const {
  return _internal_has_join_room_request();
}
inline void Request::set_has_join_room_request() {
  _oneof_case_[0] = kJoinRoomRequest;
}
inline void Request::clear_join_room_request() {
  if (_internal_has_join_room_request()) {
    if (GetArena() == nullptr) {
      delete msg_.join_room_request_;
    }
    clear_has_msg();
  }
}
inline ::Serialize::JoinRoomRequest* Request::release_join_room_request() {
  // @@protoc_insertion_point(field_release:Serialize.Request.join_room_request)
  if (_internal_has_join_room_request()) {
    clear_has_msg();
      ::Serialize::JoinRoomRequest* temp = msg_.join_room_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.join_room_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::JoinRoomRequest& Request::_internal_join_room_request() const {
  return _internal_has_join_room_request()
      ? *msg_.join_room_request_
      : reinterpret_cast< ::Serialize::JoinRoomRequest&>(::Serialize::_JoinRoomRequest_default_instance_);
}
inline const ::Serialize::JoinRoomRequest& Request::join_room_request() const {
  // @@protoc_insertion_point(field_get:Serialize.Request.join_room_request)
  return _internal_join_room_request();
}
inline ::Serialize::JoinRoomRequest* Request::unsafe_arena_release_join_room_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.Request.join_room_request)
  if (_internal_has_join_room_request()) {
    clear_has_msg();
    ::Serialize::JoinRoomRequest* temp = msg_.join_room_request_;
    msg_.join_room_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_join_room_request(::Serialize::JoinRoomRequest* join_room_request) {
  clear_msg();
  if (join_room_request) {
    set_has_join_room_request();
    msg_.join_room_request_ = join_room_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.Request.join_room_request)
}
inline ::Serialize::JoinRoomRequest* Request::_internal_mutable_join_room_request() {
  if (!_internal_has_join_room_request()) {
    clear_msg();
    set_has_join_room_request();
    msg_.join_room_request_ = CreateMaybeMessage< ::Serialize::JoinRoomRequest >(GetArena());
  }
  return msg_.join_room_request_;
}
inline ::Serialize::JoinRoomRequest* Request::mutable_join_room_request() {
  // @@protoc_insertion_point(field_mutable:Serialize.Request.join_room_request)
  return _internal_mutable_join_room_request();
}

// .Serialize.TextRequest text_request = 4;
inline bool Request::_internal_has_text_request() const {
  return msg_case() == kTextRequest;
}
inline bool Request::has_text_request() const {
  return _internal_has_text_request();
}
inline void Request::set_has_text_request() {
  _oneof_case_[0] = kTextRequest;
}
inline void Request::clear_text_request() {
  if (_internal_has_text_request()) {
    if (GetArena() == nullptr) {
      delete msg_.text_request_;
    }
    clear_has_msg();
  }
}
inline ::Serialize::TextRequest* Request::release_text_request() {
  // @@protoc_insertion_point(field_release:Serialize.Request.text_request)
  if (_internal_has_text_request()) {
    clear_has_msg();
      ::Serialize::TextRequest* temp = msg_.text_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.text_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::TextRequest& Request::_internal_text_request() const {
  return _internal_has_text_request()
      ? *msg_.text_request_
      : reinterpret_cast< ::Serialize::TextRequest&>(::Serialize::_TextRequest_default_instance_);
}
inline const ::Serialize::TextRequest& Request::text_request() const {
  // @@protoc_insertion_point(field_get:Serialize.Request.text_request)
  return _internal_text_request();
}
inline ::Serialize::TextRequest* Request::unsafe_arena_release_text_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.Request.text_request)
  if (_internal_has_text_request()) {
    clear_has_msg();
    ::Serialize::TextRequest* temp = msg_.text_request_;
    msg_.text_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_text_request(::Serialize::TextRequest* text_request) {
  clear_msg();
  if (text_request) {
    set_has_text_request();
    msg_.text_request_ = text_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.Request.text_request)
}
inline ::Serialize::TextRequest* Request::_internal_mutable_text_request() {
  if (!_internal_has_text_request()) {
    clear_msg();
    set_has_text_request();
    msg_.text_request_ = CreateMaybeMessage< ::Serialize::TextRequest >(GetArena());
  }
  return msg_.text_request_;
}
inline ::Serialize::TextRequest* Request::mutable_text_request() {
  // @@protoc_insertion_point(field_mutable:Serialize.Request.text_request)
  return _internal_mutable_text_request();
}

inline bool Request::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Request::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Request::MsgCase Request::msg_case() const {
  return Request::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto
