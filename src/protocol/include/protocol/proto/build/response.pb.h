// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_response_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_response_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_response_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_response_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_response_2eproto;
namespace Serialize {
class InputResponse;
class InputResponseDefaultTypeInternal;
extern InputResponseDefaultTypeInternal _InputResponse_default_instance_;
class JoinRoomResponse;
class JoinRoomResponseDefaultTypeInternal;
extern JoinRoomResponseDefaultTypeInternal _JoinRoomResponse_default_instance_;
class RegResponse;
class RegResponseDefaultTypeInternal;
extern RegResponseDefaultTypeInternal _RegResponse_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class TextResponse;
class TextResponseDefaultTypeInternal;
extern TextResponseDefaultTypeInternal _TextResponse_default_instance_;
}  // namespace Serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialize::InputResponse* Arena::CreateMaybeMessage<::Serialize::InputResponse>(Arena*);
template<> ::Serialize::JoinRoomResponse* Arena::CreateMaybeMessage<::Serialize::JoinRoomResponse>(Arena*);
template<> ::Serialize::RegResponse* Arena::CreateMaybeMessage<::Serialize::RegResponse>(Arena*);
template<> ::Serialize::Response* Arena::CreateMaybeMessage<::Serialize::Response>(Arena*);
template<> ::Serialize::TextResponse* Arena::CreateMaybeMessage<::Serialize::TextResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialize {

enum STATUS : int {
  FAIL = 0,
  OK = 1,
  STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool STATUS_IsValid(int value);
constexpr STATUS STATUS_MIN = FAIL;
constexpr STATUS STATUS_MAX = OK;
constexpr int STATUS_ARRAYSIZE = STATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STATUS_descriptor();
template<typename T>
inline const std::string& STATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STATUS_descriptor(), enum_t_value);
}
inline bool STATUS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, STATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STATUS>(
    STATUS_descriptor(), name, value);
}
// ===================================================================

class InputResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.InputResponse) */ {
 public:
  inline InputResponse() : InputResponse(nullptr) {}
  virtual ~InputResponse();

  InputResponse(const InputResponse& from);
  InputResponse(InputResponse&& from) noexcept
    : InputResponse() {
    *this = ::std::move(from);
  }

  inline InputResponse& operator=(const InputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputResponse& operator=(InputResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputResponse& default_instance();

  static inline const InputResponse* internal_default_instance() {
    return reinterpret_cast<const InputResponse*>(
               &_InputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputResponse& a, InputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InputResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputResponse* New() const final {
    return CreateMaybeMessage<InputResponse>(nullptr);
  }

  InputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputResponse& from);
  void MergeFrom(const InputResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.InputResponse";
  }
  protected:
  explicit InputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_response_2eproto);
    return ::descriptor_table_response_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kChatIdFieldNumber = 4,
  };
  // .Serialize.STATUS status = 1;
  void clear_status();
  ::Serialize::STATUS status() const;
  void set_status(::Serialize::STATUS value);
  private:
  ::Serialize::STATUS _internal_status() const;
  void _internal_set_status(::Serialize::STATUS value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_id = 3;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chat_id = 4;
  void clear_chat_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_id() const;
  void set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_id() const;
  void _internal_set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.InputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class RegResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.RegResponse) */ {
 public:
  inline RegResponse() : RegResponse(nullptr) {}
  virtual ~RegResponse();

  RegResponse(const RegResponse& from);
  RegResponse(RegResponse&& from) noexcept
    : RegResponse() {
    *this = ::std::move(from);
  }

  inline RegResponse& operator=(const RegResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegResponse& operator=(RegResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegResponse& default_instance();

  static inline const RegResponse* internal_default_instance() {
    return reinterpret_cast<const RegResponse*>(
               &_RegResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegResponse& a, RegResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegResponse* New() const final {
    return CreateMaybeMessage<RegResponse>(nullptr);
  }

  RegResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegResponse& from);
  void MergeFrom(const RegResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.RegResponse";
  }
  protected:
  explicit RegResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_response_2eproto);
    return ::descriptor_table_response_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kChatIdFieldNumber = 4,
  };
  // .Serialize.STATUS status = 1;
  void clear_status();
  ::Serialize::STATUS status() const;
  void set_status(::Serialize::STATUS value);
  private:
  ::Serialize::STATUS _internal_status() const;
  void _internal_set_status(::Serialize::STATUS value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_id = 3;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chat_id = 4;
  void clear_chat_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_id() const;
  void set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_id() const;
  void _internal_set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.RegResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class JoinRoomResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.JoinRoomResponse) */ {
 public:
  inline JoinRoomResponse() : JoinRoomResponse(nullptr) {}
  virtual ~JoinRoomResponse();

  JoinRoomResponse(const JoinRoomResponse& from);
  JoinRoomResponse(JoinRoomResponse&& from) noexcept
    : JoinRoomResponse() {
    *this = ::std::move(from);
  }

  inline JoinRoomResponse& operator=(const JoinRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomResponse& operator=(JoinRoomResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinRoomResponse& default_instance();

  static inline const JoinRoomResponse* internal_default_instance() {
    return reinterpret_cast<const JoinRoomResponse*>(
               &_JoinRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JoinRoomResponse& a, JoinRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinRoomResponse* New() const final {
    return CreateMaybeMessage<JoinRoomResponse>(nullptr);
  }

  JoinRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRoomResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRoomResponse& from);
  void MergeFrom(const JoinRoomResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.JoinRoomResponse";
  }
  protected:
  explicit JoinRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_response_2eproto);
    return ::descriptor_table_response_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kRoomIdFieldNumber = 2,
  };
  // .Serialize.STATUS status = 1;
  void clear_status();
  ::Serialize::STATUS status() const;
  void set_status(::Serialize::STATUS value);
  private:
  ::Serialize::STATUS _internal_status() const;
  void _internal_set_status(::Serialize::STATUS value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.JoinRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class TextResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.TextResponse) */ {
 public:
  inline TextResponse() : TextResponse(nullptr) {}
  virtual ~TextResponse();

  TextResponse(const TextResponse& from);
  TextResponse(TextResponse&& from) noexcept
    : TextResponse() {
    *this = ::std::move(from);
  }

  inline TextResponse& operator=(const TextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextResponse& operator=(TextResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextResponse& default_instance();

  static inline const TextResponse* internal_default_instance() {
    return reinterpret_cast<const TextResponse*>(
               &_TextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TextResponse& a, TextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TextResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextResponse* New() const final {
    return CreateMaybeMessage<TextResponse>(nullptr);
  }

  TextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextResponse& from);
  void MergeFrom(const TextResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.TextResponse";
  }
  protected:
  explicit TextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_response_2eproto);
    return ::descriptor_table_response_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kTextFieldNumber = 3,
    kRoomIdFieldNumber = 2,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string text = 3;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 room_id = 2;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.TextResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum MsgCase {
    kInputResponse = 1,
    kRegResponse = 2,
    kJoinRoomResponse = 3,
    kTextResponse = 4,
    MSG_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_response_2eproto);
    return ::descriptor_table_response_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputResponseFieldNumber = 1,
    kRegResponseFieldNumber = 2,
    kJoinRoomResponseFieldNumber = 3,
    kTextResponseFieldNumber = 4,
  };
  // .Serialize.InputResponse input_response = 1;
  bool has_input_response() const;
  private:
  bool _internal_has_input_response() const;
  public:
  void clear_input_response();
  const ::Serialize::InputResponse& input_response() const;
  ::Serialize::InputResponse* release_input_response();
  ::Serialize::InputResponse* mutable_input_response();
  void set_allocated_input_response(::Serialize::InputResponse* input_response);
  private:
  const ::Serialize::InputResponse& _internal_input_response() const;
  ::Serialize::InputResponse* _internal_mutable_input_response();
  public:
  void unsafe_arena_set_allocated_input_response(
      ::Serialize::InputResponse* input_response);
  ::Serialize::InputResponse* unsafe_arena_release_input_response();

  // .Serialize.RegResponse reg_response = 2;
  bool has_reg_response() const;
  private:
  bool _internal_has_reg_response() const;
  public:
  void clear_reg_response();
  const ::Serialize::RegResponse& reg_response() const;
  ::Serialize::RegResponse* release_reg_response();
  ::Serialize::RegResponse* mutable_reg_response();
  void set_allocated_reg_response(::Serialize::RegResponse* reg_response);
  private:
  const ::Serialize::RegResponse& _internal_reg_response() const;
  ::Serialize::RegResponse* _internal_mutable_reg_response();
  public:
  void unsafe_arena_set_allocated_reg_response(
      ::Serialize::RegResponse* reg_response);
  ::Serialize::RegResponse* unsafe_arena_release_reg_response();

  // .Serialize.JoinRoomResponse join_room_response = 3;
  bool has_join_room_response() const;
  private:
  bool _internal_has_join_room_response() const;
  public:
  void clear_join_room_response();
  const ::Serialize::JoinRoomResponse& join_room_response() const;
  ::Serialize::JoinRoomResponse* release_join_room_response();
  ::Serialize::JoinRoomResponse* mutable_join_room_response();
  void set_allocated_join_room_response(::Serialize::JoinRoomResponse* join_room_response);
  private:
  const ::Serialize::JoinRoomResponse& _internal_join_room_response() const;
  ::Serialize::JoinRoomResponse* _internal_mutable_join_room_response();
  public:
  void unsafe_arena_set_allocated_join_room_response(
      ::Serialize::JoinRoomResponse* join_room_response);
  ::Serialize::JoinRoomResponse* unsafe_arena_release_join_room_response();

  // .Serialize.TextResponse text_response = 4;
  bool has_text_response() const;
  private:
  bool _internal_has_text_response() const;
  public:
  void clear_text_response();
  const ::Serialize::TextResponse& text_response() const;
  ::Serialize::TextResponse* release_text_response();
  ::Serialize::TextResponse* mutable_text_response();
  void set_allocated_text_response(::Serialize::TextResponse* text_response);
  private:
  const ::Serialize::TextResponse& _internal_text_response() const;
  ::Serialize::TextResponse* _internal_mutable_text_response();
  public:
  void unsafe_arena_set_allocated_text_response(
      ::Serialize::TextResponse* text_response);
  ::Serialize::TextResponse* unsafe_arena_release_text_response();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Serialize.Response)
 private:
  class _Internal;
  void set_has_input_response();
  void set_has_reg_response();
  void set_has_join_room_response();
  void set_has_text_response();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    MsgUnion() {}
    ::Serialize::InputResponse* input_response_;
    ::Serialize::RegResponse* reg_response_;
    ::Serialize::JoinRoomResponse* join_room_response_;
    ::Serialize::TextResponse* text_response_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_response_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputResponse

// .Serialize.STATUS status = 1;
inline void InputResponse::clear_status() {
  status_ = 0;
}
inline ::Serialize::STATUS InputResponse::_internal_status() const {
  return static_cast< ::Serialize::STATUS >(status_);
}
inline ::Serialize::STATUS InputResponse::status() const {
  // @@protoc_insertion_point(field_get:Serialize.InputResponse.status)
  return _internal_status();
}
inline void InputResponse::_internal_set_status(::Serialize::STATUS value) {
  
  status_ = value;
}
inline void InputResponse::set_status(::Serialize::STATUS value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Serialize.InputResponse.status)
}

// int32 msg_id = 2;
inline void InputResponse::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputResponse::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:Serialize.InputResponse.msg_id)
  return _internal_msg_id();
}
inline void InputResponse::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void InputResponse::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:Serialize.InputResponse.msg_id)
}

// int32 client_id = 3;
inline void InputResponse::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputResponse::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputResponse::client_id() const {
  // @@protoc_insertion_point(field_get:Serialize.InputResponse.client_id)
  return _internal_client_id();
}
inline void InputResponse::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void InputResponse::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:Serialize.InputResponse.client_id)
}

// int32 chat_id = 4;
inline void InputResponse::clear_chat_id() {
  chat_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputResponse::_internal_chat_id() const {
  return chat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputResponse::chat_id() const {
  // @@protoc_insertion_point(field_get:Serialize.InputResponse.chat_id)
  return _internal_chat_id();
}
inline void InputResponse::_internal_set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_id_ = value;
}
inline void InputResponse::set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:Serialize.InputResponse.chat_id)
}

// -------------------------------------------------------------------

// RegResponse

// .Serialize.STATUS status = 1;
inline void RegResponse::clear_status() {
  status_ = 0;
}
inline ::Serialize::STATUS RegResponse::_internal_status() const {
  return static_cast< ::Serialize::STATUS >(status_);
}
inline ::Serialize::STATUS RegResponse::status() const {
  // @@protoc_insertion_point(field_get:Serialize.RegResponse.status)
  return _internal_status();
}
inline void RegResponse::_internal_set_status(::Serialize::STATUS value) {
  
  status_ = value;
}
inline void RegResponse::set_status(::Serialize::STATUS value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Serialize.RegResponse.status)
}

// int32 msg_id = 2;
inline void RegResponse::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegResponse::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:Serialize.RegResponse.msg_id)
  return _internal_msg_id();
}
inline void RegResponse::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void RegResponse::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:Serialize.RegResponse.msg_id)
}

// int32 client_id = 3;
inline void RegResponse::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegResponse::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegResponse::client_id() const {
  // @@protoc_insertion_point(field_get:Serialize.RegResponse.client_id)
  return _internal_client_id();
}
inline void RegResponse::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void RegResponse::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:Serialize.RegResponse.client_id)
}

// int32 chat_id = 4;
inline void RegResponse::clear_chat_id() {
  chat_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegResponse::_internal_chat_id() const {
  return chat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegResponse::chat_id() const {
  // @@protoc_insertion_point(field_get:Serialize.RegResponse.chat_id)
  return _internal_chat_id();
}
inline void RegResponse::_internal_set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_id_ = value;
}
inline void RegResponse::set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:Serialize.RegResponse.chat_id)
}

// -------------------------------------------------------------------

// JoinRoomResponse

// .Serialize.STATUS status = 1;
inline void JoinRoomResponse::clear_status() {
  status_ = 0;
}
inline ::Serialize::STATUS JoinRoomResponse::_internal_status() const {
  return static_cast< ::Serialize::STATUS >(status_);
}
inline ::Serialize::STATUS JoinRoomResponse::status() const {
  // @@protoc_insertion_point(field_get:Serialize.JoinRoomResponse.status)
  return _internal_status();
}
inline void JoinRoomResponse::_internal_set_status(::Serialize::STATUS value) {
  
  status_ = value;
}
inline void JoinRoomResponse::set_status(::Serialize::STATUS value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Serialize.JoinRoomResponse.status)
}

// int32 room_id = 2;
inline void JoinRoomResponse::clear_room_id() {
  room_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinRoomResponse::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinRoomResponse::room_id() const {
  // @@protoc_insertion_point(field_get:Serialize.JoinRoomResponse.room_id)
  return _internal_room_id();
}
inline void JoinRoomResponse::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_id_ = value;
}
inline void JoinRoomResponse::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:Serialize.JoinRoomResponse.room_id)
}

// -------------------------------------------------------------------

// TextResponse

// string login = 1;
inline void TextResponse::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextResponse::login() const {
  // @@protoc_insertion_point(field_get:Serialize.TextResponse.login)
  return _internal_login();
}
inline void TextResponse::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:Serialize.TextResponse.login)
}
inline std::string* TextResponse::mutable_login() {
  // @@protoc_insertion_point(field_mutable:Serialize.TextResponse.login)
  return _internal_mutable_login();
}
inline const std::string& TextResponse::_internal_login() const {
  return login_.Get();
}
inline void TextResponse::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextResponse::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.TextResponse.login)
}
inline void TextResponse::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.TextResponse.login)
}
inline void TextResponse::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.TextResponse.login)
}
inline std::string* TextResponse::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextResponse::release_login() {
  // @@protoc_insertion_point(field_release:Serialize.TextResponse.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextResponse::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.TextResponse.login)
}

// int32 room_id = 2;
inline void TextResponse::clear_room_id() {
  room_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextResponse::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextResponse::room_id() const {
  // @@protoc_insertion_point(field_get:Serialize.TextResponse.room_id)
  return _internal_room_id();
}
inline void TextResponse::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_id_ = value;
}
inline void TextResponse::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:Serialize.TextResponse.room_id)
}

// string text = 3;
inline void TextResponse::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextResponse::text() const {
  // @@protoc_insertion_point(field_get:Serialize.TextResponse.text)
  return _internal_text();
}
inline void TextResponse::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Serialize.TextResponse.text)
}
inline std::string* TextResponse::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Serialize.TextResponse.text)
  return _internal_mutable_text();
}
inline const std::string& TextResponse::_internal_text() const {
  return text_.Get();
}
inline void TextResponse::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextResponse::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.TextResponse.text)
}
inline void TextResponse::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.TextResponse.text)
}
inline void TextResponse::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.TextResponse.text)
}
inline std::string* TextResponse::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextResponse::release_text() {
  // @@protoc_insertion_point(field_release:Serialize.TextResponse.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextResponse::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.TextResponse.text)
}

// -------------------------------------------------------------------

// Response

// .Serialize.InputResponse input_response = 1;
inline bool Response::_internal_has_input_response() const {
  return msg_case() == kInputResponse;
}
inline bool Response::has_input_response() const {
  return _internal_has_input_response();
}
inline void Response::set_has_input_response() {
  _oneof_case_[0] = kInputResponse;
}
inline void Response::clear_input_response() {
  if (_internal_has_input_response()) {
    if (GetArena() == nullptr) {
      delete msg_.input_response_;
    }
    clear_has_msg();
  }
}
inline ::Serialize::InputResponse* Response::release_input_response() {
  // @@protoc_insertion_point(field_release:Serialize.Response.input_response)
  if (_internal_has_input_response()) {
    clear_has_msg();
      ::Serialize::InputResponse* temp = msg_.input_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.input_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::InputResponse& Response::_internal_input_response() const {
  return _internal_has_input_response()
      ? *msg_.input_response_
      : reinterpret_cast< ::Serialize::InputResponse&>(::Serialize::_InputResponse_default_instance_);
}
inline const ::Serialize::InputResponse& Response::input_response() const {
  // @@protoc_insertion_point(field_get:Serialize.Response.input_response)
  return _internal_input_response();
}
inline ::Serialize::InputResponse* Response::unsafe_arena_release_input_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.Response.input_response)
  if (_internal_has_input_response()) {
    clear_has_msg();
    ::Serialize::InputResponse* temp = msg_.input_response_;
    msg_.input_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_input_response(::Serialize::InputResponse* input_response) {
  clear_msg();
  if (input_response) {
    set_has_input_response();
    msg_.input_response_ = input_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.Response.input_response)
}
inline ::Serialize::InputResponse* Response::_internal_mutable_input_response() {
  if (!_internal_has_input_response()) {
    clear_msg();
    set_has_input_response();
    msg_.input_response_ = CreateMaybeMessage< ::Serialize::InputResponse >(GetArena());
  }
  return msg_.input_response_;
}
inline ::Serialize::InputResponse* Response::mutable_input_response() {
  // @@protoc_insertion_point(field_mutable:Serialize.Response.input_response)
  return _internal_mutable_input_response();
}

// .Serialize.RegResponse reg_response = 2;
inline bool Response::_internal_has_reg_response() const {
  return msg_case() == kRegResponse;
}
inline bool Response::has_reg_response() const {
  return _internal_has_reg_response();
}
inline void Response::set_has_reg_response() {
  _oneof_case_[0] = kRegResponse;
}
inline void Response::clear_reg_response() {
  if (_internal_has_reg_response()) {
    if (GetArena() == nullptr) {
      delete msg_.reg_response_;
    }
    clear_has_msg();
  }
}
inline ::Serialize::RegResponse* Response::release_reg_response() {
  // @@protoc_insertion_point(field_release:Serialize.Response.reg_response)
  if (_internal_has_reg_response()) {
    clear_has_msg();
      ::Serialize::RegResponse* temp = msg_.reg_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.reg_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::RegResponse& Response::_internal_reg_response() const {
  return _internal_has_reg_response()
      ? *msg_.reg_response_
      : reinterpret_cast< ::Serialize::RegResponse&>(::Serialize::_RegResponse_default_instance_);
}
inline const ::Serialize::RegResponse& Response::reg_response() const {
  // @@protoc_insertion_point(field_get:Serialize.Response.reg_response)
  return _internal_reg_response();
}
inline ::Serialize::RegResponse* Response::unsafe_arena_release_reg_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.Response.reg_response)
  if (_internal_has_reg_response()) {
    clear_has_msg();
    ::Serialize::RegResponse* temp = msg_.reg_response_;
    msg_.reg_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_reg_response(::Serialize::RegResponse* reg_response) {
  clear_msg();
  if (reg_response) {
    set_has_reg_response();
    msg_.reg_response_ = reg_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.Response.reg_response)
}
inline ::Serialize::RegResponse* Response::_internal_mutable_reg_response() {
  if (!_internal_has_reg_response()) {
    clear_msg();
    set_has_reg_response();
    msg_.reg_response_ = CreateMaybeMessage< ::Serialize::RegResponse >(GetArena());
  }
  return msg_.reg_response_;
}
inline ::Serialize::RegResponse* Response::mutable_reg_response() {
  // @@protoc_insertion_point(field_mutable:Serialize.Response.reg_response)
  return _internal_mutable_reg_response();
}

// .Serialize.JoinRoomResponse join_room_response = 3;
inline bool Response::_internal_has_join_room_response() const {
  return msg_case() == kJoinRoomResponse;
}
inline bool Response::has_join_room_response() const {
  return _internal_has_join_room_response();
}
inline void Response::set_has_join_room_response() {
  _oneof_case_[0] = kJoinRoomResponse;
}
inline void Response::clear_join_room_response() {
  if (_internal_has_join_room_response()) {
    if (GetArena() == nullptr) {
      delete msg_.join_room_response_;
    }
    clear_has_msg();
  }
}
inline ::Serialize::JoinRoomResponse* Response::release_join_room_response() {
  // @@protoc_insertion_point(field_release:Serialize.Response.join_room_response)
  if (_internal_has_join_room_response()) {
    clear_has_msg();
      ::Serialize::JoinRoomResponse* temp = msg_.join_room_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.join_room_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::JoinRoomResponse& Response::_internal_join_room_response() const {
  return _internal_has_join_room_response()
      ? *msg_.join_room_response_
      : reinterpret_cast< ::Serialize::JoinRoomResponse&>(::Serialize::_JoinRoomResponse_default_instance_);
}
inline const ::Serialize::JoinRoomResponse& Response::join_room_response() const {
  // @@protoc_insertion_point(field_get:Serialize.Response.join_room_response)
  return _internal_join_room_response();
}
inline ::Serialize::JoinRoomResponse* Response::unsafe_arena_release_join_room_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.Response.join_room_response)
  if (_internal_has_join_room_response()) {
    clear_has_msg();
    ::Serialize::JoinRoomResponse* temp = msg_.join_room_response_;
    msg_.join_room_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_join_room_response(::Serialize::JoinRoomResponse* join_room_response) {
  clear_msg();
  if (join_room_response) {
    set_has_join_room_response();
    msg_.join_room_response_ = join_room_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.Response.join_room_response)
}
inline ::Serialize::JoinRoomResponse* Response::_internal_mutable_join_room_response() {
  if (!_internal_has_join_room_response()) {
    clear_msg();
    set_has_join_room_response();
    msg_.join_room_response_ = CreateMaybeMessage< ::Serialize::JoinRoomResponse >(GetArena());
  }
  return msg_.join_room_response_;
}
inline ::Serialize::JoinRoomResponse* Response::mutable_join_room_response() {
  // @@protoc_insertion_point(field_mutable:Serialize.Response.join_room_response)
  return _internal_mutable_join_room_response();
}

// .Serialize.TextResponse text_response = 4;
inline bool Response::_internal_has_text_response() const {
  return msg_case() == kTextResponse;
}
inline bool Response::has_text_response() const {
  return _internal_has_text_response();
}
inline void Response::set_has_text_response() {
  _oneof_case_[0] = kTextResponse;
}
inline void Response::clear_text_response() {
  if (_internal_has_text_response()) {
    if (GetArena() == nullptr) {
      delete msg_.text_response_;
    }
    clear_has_msg();
  }
}
inline ::Serialize::TextResponse* Response::release_text_response() {
  // @@protoc_insertion_point(field_release:Serialize.Response.text_response)
  if (_internal_has_text_response()) {
    clear_has_msg();
      ::Serialize::TextResponse* temp = msg_.text_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.text_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::TextResponse& Response::_internal_text_response() const {
  return _internal_has_text_response()
      ? *msg_.text_response_
      : reinterpret_cast< ::Serialize::TextResponse&>(::Serialize::_TextResponse_default_instance_);
}
inline const ::Serialize::TextResponse& Response::text_response() const {
  // @@protoc_insertion_point(field_get:Serialize.Response.text_response)
  return _internal_text_response();
}
inline ::Serialize::TextResponse* Response::unsafe_arena_release_text_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.Response.text_response)
  if (_internal_has_text_response()) {
    clear_has_msg();
    ::Serialize::TextResponse* temp = msg_.text_response_;
    msg_.text_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_text_response(::Serialize::TextResponse* text_response) {
  clear_msg();
  if (text_response) {
    set_has_text_response();
    msg_.text_response_ = text_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.Response.text_response)
}
inline ::Serialize::TextResponse* Response::_internal_mutable_text_response() {
  if (!_internal_has_text_response()) {
    clear_msg();
    set_has_text_response();
    msg_.text_response_ = CreateMaybeMessage< ::Serialize::TextResponse >(GetArena());
  }
  return msg_.text_response_;
}
inline ::Serialize::TextResponse* Response::mutable_text_response() {
  // @@protoc_insertion_point(field_mutable:Serialize.Response.text_response)
  return _internal_mutable_text_response();
}

inline bool Response::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Response::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Response::MsgCase Response::msg_case() const {
  return Response::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Serialize::STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Serialize::STATUS>() {
  return ::Serialize::STATUS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_response_2eproto
